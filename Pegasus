pip install --upgrade transformers sentencepiece

import torch

import pandas as pd
#from transfer-learning import get_device
from transformers import PegasusForConditionalGeneration, PegasusTokenizer
get_device = 'cuda' if torch.cuda.is_available() else 'cpu'

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print('Using device:', device)

MODEL_NAME = 'tuner007/pegasus_paraphrase'
torch_device = device
tokenizer = PegasusTokenizer.from_pretrained(MODEL_NAME)
model = PegasusForConditionalGeneration.from_pretrained(MODEL_NAME).to(torch_device)

def get_response(input_text, num_return_sequences):
    batch = tokenizer.prepare_seq2seq_batch([input_text],
                                            truncation=True,
                                            padding='longest',
                                            return_tensors="pt").to(torch_device)
    translated = model.generate(**batch,
                                num_beams=num_return_sequences,
                                num_return_sequences=num_return_sequences,
                                temperature=1.5).to(torch_device)
    tgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)
    return tgt_text
    
    def main(train_df):
    train = train_df
    train = train[['summary', 'sentiment']]
    train['summary'] = train['summary'].apply(get_response, num_return_sequences=3)
    generated = train.explode('summary')
    generated = generated.dropna()
    generated = generated.drop_duplicates()
    return generated
    
    
df=pd.read_csv('news.csv')
df.rename(columns={'Text': 'summary', 'label': 'sentiment'}, inplace=True)
df.head()

df_aug=main(df)

df_aug.to_csv('news_aug.csv', header=None,index = False )
